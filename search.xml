<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[WebGL画点程序v1]]></title>
    <url>%2F2018%2F10%2F05%2FWebGL%E7%94%BB%E7%82%B9%E7%A8%8B%E5%BA%8Fv1%2F</url>
    <content type="text"><![CDATA[本文程序实现画一个点的任务，如下图。其中，点的位置直接给定（“硬编码”）在顶点着色器中。 整个程序包含两个文件，分别是： 1. HelloPoint1.html12345678910111213&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;&lt;html&gt; &lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt; &lt;title&gt;画一个点&lt;/title&gt; &lt;/head&gt; &lt;body onload="startup()"&gt; &lt;canvas id="myGLCanvas" width="640" height="480"&gt; &lt;/canvas&gt; &lt;/body&gt; &lt;script type="text/javascript" src="HelloPoint1.js"&gt; &lt;/script&gt;&lt;/html&gt; 2. HelloPoint1.js1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071var gl;function createGLContext(canvas) &#123; var names = ["webgl", "experimental-webgl"]; var context = null; for (var i=0; i &lt; names.length; i++) &#123; try &#123; context = canvas.getContext(names[i]); //获取webgl context绘图上下文 &#125; catch(e) &#123;&#125; if (context) &#123; break; &#125; &#125; if (context) &#123; context.viewportWidth = canvas.width; context.viewportHeight = canvas.height; &#125; else &#123; alert("Failed to create WebGL context!"); &#125; return context;&#125;function loadShader(type, shaderSource) &#123; var shader = gl.createShader(type); gl.shaderSource(shader, shaderSource); gl.compileShader(shader); if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) &#123; alert("Error compiling shader" + gl.getShaderInfoLog(shader)); gl.deleteShader(shader); return null; &#125; return shader; &#125;function setupShaders() &#123; //顶点着色器程序 var vertexShaderSource = 'void main()&#123; \n' + ' gl_Position = vec4(0.0, 0.0, 0.0, 1.0); \n' + //gl_Position指定了点的位置 ' gl_PointSize = 10.0; \n' + '&#125; \n'; //片元着色器程序 var fragmentShaderSource = 'void main()&#123; \n' + ' gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0); \n' + //gl_FragColor指定像素的颜色 '&#125; \n'; var vertexShader = loadShader(gl.VERTEX_SHADER, vertexShaderSource); var fragmentShader = loadShader(gl.FRAGMENT_SHADER, fragmentShaderSource); var shaderProgram = gl.createProgram(); gl.attachShader(shaderProgram, vertexShader); gl.attachShader(shaderProgram, fragmentShader); gl.linkProgram(shaderProgram); if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) &#123; alert("Failed to setup shaders"); &#125; gl.useProgram(shaderProgram); gl.program= shaderProgram;&#125;function startup()&#123; var canvas = document.getElementById('myGLCanvas');//获取&lt;canvas&gt;元素 gl = createGLContext(canvas); setupShaders(); gl.clearColor(0.0, 0.0, 0.0, 1.0);//指定清空&lt;canvas&gt;的颜色 gl.clear(gl.COLOR_BUFFER_BIT);//清空&lt;canvas&gt; gl.drawArrays(gl.POINTS, 0, 1);//从第0个元素开始，在指定位置（gl_Position）画1个点 &#125; 参考代码 Hello Point——WebGL, http://www.cnblogs.com/idealer3d/p/3513838.html Professional WebGL Programming: Developing 3D Graphics for the Web,Listing 2-1,http://media.wiley.com/product_ancillary/60/11199688/DOWNLOAD/Listing-2-1.html 转载请注明出处：http://www.cnblogs.com/opengl/p/7262596.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[个人博客搭建备忘录]]></title>
    <url>%2F2018%2F10%2F05%2F%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%A4%87%E5%BF%98%E5%BD%95%2F</url>
    <content type="text"><![CDATA[我的博客最开始是在博客园上，后面转到CSDN.因为CSDN的审核机制感觉不好，因此趁着今年国庆搭建了一个独立博客。现在将搭建过程记录下来，供自己以后备忘，同时也供有兴趣的读者参考。 独立博客搭建过程按步骤可分为三步：（1）博客网站构建；（2）发布到托管网站；（3）自定义域名绑定。其中，第3步非必须，只针对有自定义域名情形。 一. 博客网站构建根据自己的学习与了解，目前通过GitHub来搭建个人博客，可以有两种常见的方式：Jekyll和Hexo。下面对这两种方式分别简单介绍。 1. Jekyll方式(1) 拉取博客模板到GitHub上fork拉取某个Jekyll类型博客模板的库，例如https://github.com/xudailong/xudailong.github.io； (2) 博客名称修改点击页面中上部Insights旁边的Settings，进入设置页面，修改库名为；xxx.github.io，其中xxx为你的GitHub用户名，当你在浏览器的新窗口输入：xxx.github.io时，应该能就能访问到这个博客了，只是此时这个博客里面显示内容和xudailong.github.io内容一样。 (3) 博客内容修改（i）博客主题修改主要是在_config.yml文件中，可以对照原有文件修改； （ii）博客文章修改_posts主要用来放博客文章，因此可以根据自己要求，删除无关文章，并添加自己的文章。这里文章对应的文件为markdown文件格式，文件命名为时间加标题，如2015-02-12-create-my-blog-with-jekyll.md。 说明 Jeklly 是什么 ?Jekyll从核心上来说是一个文本转换引擎。该系统内部的工作原理是：你输入一些用自己喜爱的标记语言格式书写的文本，可以是Markdown、Textile或纯粹的HTML，它将这些文本混合后放入一个或一整套页面布局当中。在整个过程中，你可以自行决定你的站点URL的模式、以及哪些数据将被显示在页面中，等等。这一切都将通过严格的文本编辑完成，而生成的Web界面则是最终的产品。 github pages与jeklly关系Jekyll is the engine behind GitHub Pages.Every GitHub Page is run through Jekyll when you push content to a specially named branch within your repository.即：提交到github-pages的内容会经过jeklly处理，转换为静态的html，前期是结构必须符合jeklly的要求。 Jeklly是否一定要在本地安装 ?本地安装目的是为了方便调试问题，所以不是必须的，安装比较繁琐。推荐：找一个满意的模板，clone下来简单修改，很少需要在本地调试。如需要本地安装，请参考：https://643435675.github.io/2015/02/15/create-my-blog-with-jekyll/ 2. Hexo方式(1) 安装工作环境 安装node 到Node.js官网下载相应平台的最新版本，一路安装即可； 安装hexo使用以下命令安装hexo到全局$ npm install -g hexo然后输入命令hexo -v显示hexo的版本号即为安装成功。(2) 博客文件夹初始化新建一个文件夹为博客网站所在文件夹（如Blog），然后进入Blog目录，下面所有的命令行操作都是在这个文件夹下进行的。用下面的命令初始化该文件夹，并生成一篇“hello word”的文章在\source_posts文件夹下：$ hexo init(3) 生成静态页面执行以下命令把文章编译为静态页面：$ hexo generate(4) 生成静态页面执行以下命令把文章编译为静态页面，生成在public中的html文件：$ hexo generate(5) 本地启动执行以下命令，本地启动服务，在浏览器中输入http://localhost:4000/查看生成的页面效果。如果不成功，可以换一个端口试试，如5000。$ hexo server -p 4000二. 发布到托管网站1. 发布到GitHub/Gitee/Coding可以通过GitHub Desktop工具来发布与同步。2. 发布到七牛云可以通过七牛云的同步工具来发布与同步。三. 自定义域名绑定1. 购买域名 GoDaddy，新加坡，可以使用支付宝; DNSPod，腾讯平台。还有许多其他平台，不一一列举。2. GitHub设置自定义域名点击GitHub页面中上部Insights旁边的Settings，进入设置页面，修改Custom domain为你购买的域名。3. 域名解析设置如果是在GoDaddy上购买的域名，可以直接在该网站内设置，也可以用DNSPod来设置，设置方法请参考：https://www.jianshu.com/p/05289a4bc8b2 参考文献 Github搭建个人博客, https://blog.csdn.net/xudailong_blog/article/details/78762262 hexo VS jekyll, https://blog.csdn.net/scythe666/article/details/51956821#cmid=212488 Hexo博客系列（六）：部署到七牛, http://www.isetsuna.com/hexo/deploy-qiniu/ 利用7牛云搭建hexo个人博客, https://blog.csdn.net/quuqu/article/details/51851574 如何搭建一个独立博客——简明Github Pages与Hexo教程，https://www.jianshu.com/p/05289a4bc8b2]]></content>
  </entry>
  <entry>
    <title><![CDATA[实验3 地理空间数据可视化]]></title>
    <url>%2F2018%2F10%2F05%2F%E5%AE%9E%E9%AA%8C3_%E5%9C%B0%E7%90%86%E7%A9%BA%E9%97%B4%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%2F</url>
    <content type="text"><![CDATA[一. 实验目的和要求1. 了解地理空间数据可视化知识，了解和学习地理空间数据可视化三种典型可视化方式，即点、线与区域。2. 学习并掌握获取地图上位置信息的方法。3. 学习并掌握绘制地图方法，及在地图上加点、线及区域的方法。二. 实验内容1. 获取自己家乡的地理位置信息；2. 根据《鲜活的数据》第8章8.2.3介绍的方法与提供的数据，在R中绘制基本地图与散点图，并存为PDF文件；3. 将上一步所得的PDF文件，导入Illustrator，以教材图8-10为模板，并在图中增加中国的数据，完成图8-10，并添上自己的署名，最终成图请以中文版为参考。图8-10英文版如下图所示： 中文版如下图所示： 再次提醒：最终成图是在参考图8-10的基础上，增加中国的数据。 三. 实验报告实验报告中的实验过程请根据实验内容结合自己的具体实验过程填写； 实验结果： （1）自己家乡及其位置信息； （2）图8-10，可以手绘，可以文字描述，也可以将图缩小打印贴上； 实验分析部分可以对整个实验过程进行回顾与总结，可以从以下一些问题角度进行分析： 实验难度与自身水平相比如何？ 通过实验有无发现自己有待提高的知识或能力吗？ 碰到什么问题？如何解决？ 本次实验有何收获或心得？简单介绍下。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>可视化</tag>
        <tag>地理空间数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实验2 关系可视化]]></title>
    <url>%2F2018%2F10%2F05%2F%E5%AE%9E%E9%AA%8C2_%E5%85%B3%E7%B3%BB%E5%8F%AF%E8%A7%86%E5%8C%96%2F</url>
    <content type="text"><![CDATA[一. 实验目的和要求1. 了解关系可视化知识，了解和学习散点图、饼图、堆叠柱形图、板块层级图和直方图等常见图表类型；2. 学习图形语法方式绘图；3. 学习与巩固R+Illustrator可视化绘图模式。二. 实验内容1. 根据《鲜活的数据》第6章6.2.1介绍的方法与提供的数据，在R中绘制基本散点图，并存为PDF文件；2. 将上一步所得的PDF文件，导入Illustrator，以教材图6-7为模板，完成图6-7，并添上自己的署名。图6-7英文如下图所示，大家提交作品文字部分按中文版处理，图形效果参考英文版。 三. 实验报告实验报告中的实验过程请根据实验内容结合自己的具体实验过程填写； 实验结果为上图，可以手绘，可以文字描述，也可以将图缩小打印贴上； 实验分析部分可以对整个实验过程进行回顾与总结，可以从以下一些问题角度进行分析： 实验难度与自身水平相比如何？ 通过实验有无发现自己有待提高的知识或能力吗？ 碰到什么问题？如何解决？ 本次实验有何收获或心得？简单介绍下。附加-实验步骤1. 下载编程工具R, 推荐用RStudio免费版（free），下载地址：https://www.rstudio.com/products/rstudio/download/；2. 数据下载地址：http://datasets.flowingdata.com/crimeRatesByState2005.csv。3. 用R绘图，具体如下：（1）安装ggplot2包：启动RStudio后，菜单栏点击Tools&gt;Install Packages…中输入ggplot2，安装；（2）新建一个R Script文件；（4）启用ggplot2包：在新建的R Script文件中输入下面代码来启用ggplot2包：library(ggplot2)将光标放在上面代码所在行，点击菜单Code-&gt;Run Select Lines运行本行代码；快捷键Ctrl+Enter;以下每行代码都需运行，不再重复。（3）数据读取：输入以下代码来读取CSV文件数据到crime变量中：crime&lt;-read.csv(‘c:\Users\…\crimeRatesByState2005.csv’,sep=”,”, header=TRUE)其中，请将“c:\Users\…\crimeRatesByState2005.csv”改为你自己的文件路径。（4）数据整理：通过以下两行代码来剔除掉华盛顿特区和全美平均值，并将剔除后的数据存入crime2变量中：crime2 &lt;- crime[crime$state != “District of Columbia”,] crime2 &lt;- crime2[crime2$state != “United States”,] （5）ggplot2绘图：通过以下代码来绘制：（i）基本图形：以数据集中的murder列为x坐标，burglary为y坐标绘制散点图如下：ggplot(crime2, aes(x = murder, y = burglary)) + geom_point() （ii）增加坐标轴范围：ggplot(crime2, aes(x = murder, y = burglary)) +geom_point()+ xlim(0, 10)+ ylim(0, 1200) （iii）增加回归曲线：ggplot(crime2, aes(x = murder, y = burglary)) + geom_point()+ xlim(0, 10)+ ylim(0, 1200)+ geom_smooth() （6）保存绘图：在R绘图窗口中点击Export-&gt;Save as PDF将绘图结果保存为pdf，注意保存选项的Orientation。 4. 用Illustrator来修饰完善：将所保存的绘图结果Pdf文件导入到Illustrator中，进行修饰完善，具体过程不再赘述，请自行百度解决。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>可视化</tag>
        <tag>地理空间数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实验1 时间趋势可视化]]></title>
    <url>%2F2018%2F10%2F05%2F%E5%AE%9E%E9%AA%8C1_%E6%97%B6%E9%97%B4%E8%B6%8B%E5%8A%BF%E5%8F%AF%E8%A7%86%E5%8C%96%2F</url>
    <content type="text"><![CDATA[一. 实验目的1. 了解时间趋势可视化知识，学习与掌握柱状图的生成方法；2. 学习并掌握R+Illustrator可视化绘图模式。二. 实验内容1. 根据《鲜活的数据》第４章4.2.1提供的数据，在R中绘制柱状图，并存为PDF文件；2. 将上一步所得的PDF文件，导入Illustrator，参考教材图4-5样图，对其修改与修饰，并添上自己的署名。图4-5英文版如下图所示： 注意：pdf文件请按“序号_姓名”格式命名，以便于查找与定位。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>可视化</tag>
        <tag>时间趋势</tag>
      </tags>
  </entry>
</search>
